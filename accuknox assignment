# Problem Statement 1: Containerization and Deployment

# Dockerfile
dockerfile_content = """
# Base image
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Copy application files
COPY . .

# Install dependencies
RUN pip install -r requirements.txt

# Expose application port
EXPOSE 5000

# Run the application
CMD ["python", "app.py"]
"""

# Kubernetes Deployment YAML
deployment_yaml = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wisecow-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: wisecow
  template:
    metadata:
      labels:
        app: wisecow
    spec:
      containers:
      - name: wisecow
        image: <your-docker-image>
        ports:
        - containerPort: 5000
"""

# Kubernetes Service YAML
service_yaml = """
apiVersion: v1
kind: Service
metadata:
  name: wisecow-service
spec:
  selector:
    app: wisecow
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: LoadBalancer
"""

# GitHub Actions Workflow YAML
workflow_yaml = """
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t <your-dockerhub-repo>:latest .
        docker push <your-dockerhub-repo>:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
"""

# Problem Statement 2: Scripts

import psutil
import requests
from collections import Counter

# 1. System Health Monitoring Script
def monitor_health():
    cpu = psutil.cpu_percent()
    memory = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent

    alert = []
    if cpu > 80:
        alert.append(f"High CPU usage: {cpu}%")
    if memory > 80:
        alert.append(f"High Memory usage: {memory}%")
    if disk > 80:
        alert.append(f"Low Disk Space: {disk}%")

    if alert:
        with open("system_health.log", "a") as log_file:
            for msg in alert:
                log_file.write(msg + "\n")
        print("Alerts logged:", alert)
    else:
        print("System is healthy")

# 2. Application Health Checker
def check_health(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"Application is UP. Status Code: {response.status_code}")
        else:
            print(f"Application is DOWN. Status Code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Application is DOWN. Error: {e}")

# 3. Log File Analyzer
def analyze_logs(file_path):
    with open(file_path, "r") as log_file:
        logs = log_file.readlines()

    status_codes = [line.split()[8] for line in logs if len(line.split()) > 8]
    counter = Counter(status_codes)

    print("Log Analysis:")
    for code, count in counter.items():
        print(f"Status Code {code}: {count} times")

# Example Usage
if _name_ == "_main_":
    # System Health Monitoring
    monitor_health()

    # Application Health Checker
    check_health("http://example.com")

    # Log File Analyzer (uncomment if you have an access log file)
    # analyze_logs("access.log")
